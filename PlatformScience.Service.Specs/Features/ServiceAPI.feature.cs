// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PlatformScience.Service.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("API")]
    public partial class APIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ServiceAPI.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "API", "\tTests for the \"hoover\" API", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The default scenario works as intended")]
        [NUnit.Framework.CategoryAttribute("RestartService")]
        [NUnit.Framework.TestCaseAttribute("5", "5", "1", "2", "NNESEESWNWW", "1", "3", "1", null)]
        public virtual void TheDefaultScenarioWorksAsIntended(string dimensionX, string dimensionY, string startX, string startY, string instructions, string endX, string endY, string patchesCount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RestartService"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("dimensionX", dimensionX);
            argumentsOfScenario.Add("dimensionY", dimensionY);
            argumentsOfScenario.Add("startX", startX);
            argumentsOfScenario.Add("startY", startY);
            argumentsOfScenario.Add("instructions", instructions);
            argumentsOfScenario.Add("endX", endX);
            argumentsOfScenario.Add("endY", endY);
            argumentsOfScenario.Add("patchesCount", patchesCount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The default scenario works as intended", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
testRunner.Given(string.Format("I set the room size to {0} by {1}", dimensionX, dimensionY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
testRunner.And(string.Format("the starting coordinates to {0} and {1}", startX, startY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "patchX",
                            "patchY"});
                table1.AddRow(new string[] {
                            "1",
                            "0"});
                table1.AddRow(new string[] {
                            "2",
                            "2"});
                table1.AddRow(new string[] {
                            "2",
                            "3"});
#line 8
testRunner.And("I set dirt patches at", ((string)(null)), table1, "And ");
#line hidden
#line 13
testRunner.And(string.Format("I set the following instructions {0}", instructions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
testRunner.When("I call the cleaning-sessions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
testRunner.Then(string.Format("I should get the following ending coords {0} and {1}", endX, endY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
testRunner.And(string.Format("I should have {0} patches", patchesCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The cleaning-sessions endpoint can clean all patches")]
        [NUnit.Framework.CategoryAttribute("RestartService")]
        [NUnit.Framework.TestCaseAttribute("5", "5", "0", "0", "NNNNESSSSENNNNESSSSENNNN", "4", "4", "25", null)]
        public virtual void TheCleaning_SessionsEndpointCanCleanAllPatches(string dimensionX, string dimensionY, string startX, string startY, string instructions, string endX, string endY, string patchesCount, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RestartService"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("dimensionX", dimensionX);
            argumentsOfScenario.Add("dimensionY", dimensionY);
            argumentsOfScenario.Add("startX", startX);
            argumentsOfScenario.Add("startY", startY);
            argumentsOfScenario.Add("instructions", instructions);
            argumentsOfScenario.Add("endX", endX);
            argumentsOfScenario.Add("endY", endY);
            argumentsOfScenario.Add("patchesCount", patchesCount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The cleaning-sessions endpoint can clean all patches", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
testRunner.Given(string.Format("I set the room size to {0} by {1}", dimensionX, dimensionY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
testRunner.And(string.Format("the starting coordinates to {0} and {1}", startX, startY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "patchX",
                            "patchY"});
                table2.AddRow(new string[] {
                            "0",
                            "0"});
                table2.AddRow(new string[] {
                            "0",
                            "1"});
                table2.AddRow(new string[] {
                            "0",
                            "2"});
                table2.AddRow(new string[] {
                            "0",
                            "3"});
                table2.AddRow(new string[] {
                            "0",
                            "4"});
                table2.AddRow(new string[] {
                            "1",
                            "0"});
                table2.AddRow(new string[] {
                            "1",
                            "1"});
                table2.AddRow(new string[] {
                            "1",
                            "2"});
                table2.AddRow(new string[] {
                            "1",
                            "3"});
                table2.AddRow(new string[] {
                            "1",
                            "4"});
                table2.AddRow(new string[] {
                            "2",
                            "0"});
                table2.AddRow(new string[] {
                            "2",
                            "1"});
                table2.AddRow(new string[] {
                            "2",
                            "2"});
                table2.AddRow(new string[] {
                            "2",
                            "3"});
                table2.AddRow(new string[] {
                            "2",
                            "4"});
                table2.AddRow(new string[] {
                            "3",
                            "0"});
                table2.AddRow(new string[] {
                            "3",
                            "1"});
                table2.AddRow(new string[] {
                            "3",
                            "2"});
                table2.AddRow(new string[] {
                            "3",
                            "3"});
                table2.AddRow(new string[] {
                            "3",
                            "4"});
                table2.AddRow(new string[] {
                            "4",
                            "0"});
                table2.AddRow(new string[] {
                            "4",
                            "1"});
                table2.AddRow(new string[] {
                            "4",
                            "2"});
                table2.AddRow(new string[] {
                            "4",
                            "3"});
                table2.AddRow(new string[] {
                            "4",
                            "4"});
#line 25
testRunner.And("I set dirt patches at", ((string)(null)), table2, "And ");
#line hidden
#line 52
testRunner.And(string.Format("I set the following instructions {0}", instructions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
testRunner.When("I call the cleaning-sessions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
testRunner.Then(string.Format("I should get the following ending coords {0} and {1}", endX, endY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
testRunner.And(string.Format("I should have {0} patches", patchesCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Hoover can not go off grid")]
        [NUnit.Framework.CategoryAttribute("RestartService")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "S", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0", "0", "W", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0", "1", "W", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("0", "2", "W", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("0", "3", "W", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("0", "4", "W", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("0", "4", "N", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("1", "4", "N", "1", "4", null)]
        [NUnit.Framework.TestCaseAttribute("2", "4", "N", "2", "4", null)]
        [NUnit.Framework.TestCaseAttribute("3", "4", "N", "3", "4", null)]
        [NUnit.Framework.TestCaseAttribute("4", "4", "N", "4", "4", null)]
        [NUnit.Framework.TestCaseAttribute("4", "4", "E", "4", "4", null)]
        [NUnit.Framework.TestCaseAttribute("4", "3", "E", "4", "3", null)]
        [NUnit.Framework.TestCaseAttribute("4", "2", "E", "4", "2", null)]
        [NUnit.Framework.TestCaseAttribute("4", "1", "E", "4", "1", null)]
        [NUnit.Framework.TestCaseAttribute("4", "0", "E", "4", "0", null)]
        [NUnit.Framework.TestCaseAttribute("4", "0", "S", "4", "0", null)]
        [NUnit.Framework.TestCaseAttribute("3", "0", "S", "3", "0", null)]
        [NUnit.Framework.TestCaseAttribute("2", "0", "S", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "0", "S", "1", "0", null)]
        public virtual void HooverCanNotGoOffGrid(string startX, string startY, string instructions, string endX, string endY, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RestartService"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("startX", startX);
            argumentsOfScenario.Add("startY", startY);
            argumentsOfScenario.Add("instructions", instructions);
            argumentsOfScenario.Add("endX", endX);
            argumentsOfScenario.Add("endY", endY);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Hoover can not go off grid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
testRunner.Given("I set the room size to 5 by 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
testRunner.And(string.Format("the starting coordinates to {0} and {1}", startX, startY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "patchX",
                            "patchY"});
                table3.AddRow(new string[] {
                            "0",
                            "0"});
#line 64
testRunner.And("I set dirt patches at", ((string)(null)), table3, "And ");
#line hidden
#line 67
testRunner.And(string.Format("I set the following instructions {0}", instructions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
testRunner.When("I call the cleaning-sessions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
testRunner.Then(string.Format("I should get the following ending coords {0} and {1}", endX, endY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Service handles invalid inputs for roomSize")]
        [NUnit.Framework.CategoryAttribute("NoServiceRestart")]
        [NUnit.Framework.TestCaseAttribute("0", "0", "0", "0", "S", null)]
        [NUnit.Framework.TestCaseAttribute("5", "0", "0", "0", "S", null)]
        [NUnit.Framework.TestCaseAttribute("0", "5", "0", "0", "S", null)]
        [NUnit.Framework.TestCaseAttribute("-1", "5", "0", "0", "S", null)]
        [NUnit.Framework.TestCaseAttribute("5", "-1", "0", "0", "S", null)]
        public virtual void ServiceHandlesInvalidInputsForRoomSize(string dimensionX, string dimensionY, string startX, string startY, string instructions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NoServiceRestart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("dimensionX", dimensionX);
            argumentsOfScenario.Add("dimensionY", dimensionY);
            argumentsOfScenario.Add("startX", startX);
            argumentsOfScenario.Add("startY", startY);
            argumentsOfScenario.Add("instructions", instructions);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service handles invalid inputs for roomSize", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 95
testRunner.Given(string.Format("I set the room size to {0} by {1}", dimensionX, dimensionY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
testRunner.And(string.Format("the starting coordinates to {0} and {1}", startX, startY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "patchX",
                            "patchY"});
                table4.AddRow(new string[] {
                            "0",
                            "0"});
#line 97
testRunner.And("I set dirt patches at", ((string)(null)), table4, "And ");
#line hidden
#line 100
testRunner.And(string.Format("I set the following instructions {0}", instructions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
testRunner.When("I call the cleaning-sessions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
testRunner.Then("I should receive a BadRequest result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Service handles invalid inputs for coordinates")]
        [NUnit.Framework.CategoryAttribute("NoServiceRestart")]
        [NUnit.Framework.TestCaseAttribute("5", "5", "9", "0", "S", null)]
        [NUnit.Framework.TestCaseAttribute("5", "5", "0", "9", "S", null)]
        [NUnit.Framework.TestCaseAttribute("5", "5", "-1", "0", "S", null)]
        [NUnit.Framework.TestCaseAttribute("5", "5", "0", "-1", "S", null)]
        public virtual void ServiceHandlesInvalidInputsForCoordinates(string dimensionX, string dimensionY, string startX, string startY, string instructions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NoServiceRestart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("dimensionX", dimensionX);
            argumentsOfScenario.Add("dimensionY", dimensionY);
            argumentsOfScenario.Add("startX", startX);
            argumentsOfScenario.Add("startY", startY);
            argumentsOfScenario.Add("instructions", instructions);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service handles invalid inputs for coordinates", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 113
testRunner.Given(string.Format("I set the room size to {0} by {1}", dimensionX, dimensionY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
testRunner.And(string.Format("the starting coordinates to {0} and {1}", startX, startY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "patchX",
                            "patchY"});
                table5.AddRow(new string[] {
                            "0",
                            "0"});
#line 115
testRunner.And("I set dirt patches at", ((string)(null)), table5, "And ");
#line hidden
#line 118
testRunner.And(string.Format("I set the following instructions {0}", instructions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
testRunner.When("I call the cleaning-sessions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 120
testRunner.Then("I should receive a BadRequest result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Service handles invalid inputs for instructions")]
        [NUnit.Framework.CategoryAttribute("NoServiceRestart")]
        [NUnit.Framework.TestCaseAttribute("5", "5", "0", "0", "R", null)]
        [NUnit.Framework.TestCaseAttribute("5", "5", "0", "0", "@", null)]
        public virtual void ServiceHandlesInvalidInputsForInstructions(string dimensionX, string dimensionY, string startX, string startY, string instructions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NoServiceRestart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("dimensionX", dimensionX);
            argumentsOfScenario.Add("dimensionY", dimensionY);
            argumentsOfScenario.Add("startX", startX);
            argumentsOfScenario.Add("startY", startY);
            argumentsOfScenario.Add("instructions", instructions);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service handles invalid inputs for instructions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 130
testRunner.Given(string.Format("I set the room size to {0} by {1}", dimensionX, dimensionY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 131
testRunner.And(string.Format("the starting coordinates to {0} and {1}", startX, startY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "patchX",
                            "patchY"});
                table6.AddRow(new string[] {
                            "0",
                            "0"});
#line 132
testRunner.And("I set dirt patches at", ((string)(null)), table6, "And ");
#line hidden
#line 135
testRunner.And(string.Format("I set the following instructions {0}", instructions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
testRunner.When("I call the cleaning-sessions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
testRunner.Then("I should receive a BadRequest result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Service handles invalid inputs for patches, negative X")]
        [NUnit.Framework.CategoryAttribute("NoServiceRestart")]
        [NUnit.Framework.TestCaseAttribute("5", "5", "0", "0", "S", null)]
        public virtual void ServiceHandlesInvalidInputsForPatchesNegativeX(string dimensionX, string dimensionY, string startX, string startY, string instructions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NoServiceRestart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("dimensionX", dimensionX);
            argumentsOfScenario.Add("dimensionY", dimensionY);
            argumentsOfScenario.Add("startX", startX);
            argumentsOfScenario.Add("startY", startY);
            argumentsOfScenario.Add("instructions", instructions);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service handles invalid inputs for patches, negative X", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 145
testRunner.Given(string.Format("I set the room size to {0} by {1}", dimensionX, dimensionY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
testRunner.And(string.Format("the starting coordinates to {0} and {1}", startX, startY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "patchX",
                            "patchY"});
                table7.AddRow(new string[] {
                            "-1",
                            "0"});
#line 147
testRunner.And("I set dirt patches at", ((string)(null)), table7, "And ");
#line hidden
#line 150
testRunner.And(string.Format("I set the following instructions {0}", instructions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
testRunner.When("I call the cleaning-sessions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
testRunner.Then("I should receive a BadRequest result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Service handles invalid inputs for patches, negative Y")]
        [NUnit.Framework.CategoryAttribute("NoServiceRestart")]
        [NUnit.Framework.TestCaseAttribute("5", "5", "0", "0", "S", null)]
        public virtual void ServiceHandlesInvalidInputsForPatchesNegativeY(string dimensionX, string dimensionY, string startX, string startY, string instructions, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NoServiceRestart"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("dimensionX", dimensionX);
            argumentsOfScenario.Add("dimensionY", dimensionY);
            argumentsOfScenario.Add("startX", startX);
            argumentsOfScenario.Add("startY", startY);
            argumentsOfScenario.Add("instructions", instructions);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service handles invalid inputs for patches, negative Y", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 159
testRunner.Given(string.Format("I set the room size to {0} by {1}", dimensionX, dimensionY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 160
testRunner.And(string.Format("the starting coordinates to {0} and {1}", startX, startY), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "patchX",
                            "patchY"});
                table8.AddRow(new string[] {
                            "0",
                            "-1"});
#line 161
testRunner.And("I set dirt patches at", ((string)(null)), table8, "And ");
#line hidden
#line 164
testRunner.And(string.Format("I set the following instructions {0}", instructions), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
testRunner.When("I call the cleaning-sessions endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
testRunner.Then("I should receive a BadRequest result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
